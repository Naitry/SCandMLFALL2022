{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8adc8137",
   "metadata": {},
   "source": [
    "# Tyler Steffen\n",
    "### 8/29/2022"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "931db05e",
   "metadata": {},
   "source": [
    "### ME4111 Scientific Compution and Machine Learning\n",
    "\n",
    "# Homework 1\n",
    "\n",
    "### Due August 29\n",
    "\n",
    "video: https://uicapture.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=aca98874-c4d3-43ec-8b1d-ac6b0174b881"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef04ec5",
   "metadata": {},
   "source": [
    "### Problem 1\n",
    "\n",
    "Print the following statement \"Hey I have successfully installed python!\"\n",
    "\n",
    "(By 3:13 in the video, you should be able to do this problem.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "dda724d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey I have successfully installed python!\n"
     ]
    }
   ],
   "source": [
    "print(\"Hey I have successfully installed python!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd2b2a0b",
   "metadata": {},
   "source": [
    "### Problem 2\n",
    "\n",
    "Play with the list [1,2,3,4,5,'a','b','c','d','e']:\n",
    "1. Pick out the fifth and sixth elements of the list and store them in a new list. (By 15:18 in the video, you should be able to do this part.)\n",
    "2. Play with the pop function and remove function. \n",
    "    pop the first element from the list and remove 'a' from the list. What happens to mylist?\n",
    "    (By 22:40 in the video, you should be able to do this part).\n",
    "3. Reverse the original list use the reverse function. Print out the result. (This documentation page will be useful both for this problem and in general: https://docs.python.org/3/tutorial/datastructures.html)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e73fda2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "mylist = [1,2,3,4,5,'a','b','c','d','e' ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "fc23f937",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "b\n"
     ]
    }
   ],
   "source": [
    "mylist = [1,2,3,4,5,'a','b','c','d','e' ]\n",
    "newList = [mylist[5],mylist[6]]\n",
    "for a in newList:\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "31fccde6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "4\n",
      "5\n",
      "b\n",
      "c\n",
      "d\n",
      "e\n"
     ]
    }
   ],
   "source": [
    "mylist = [1,2,3,4,5,'a','b','c','d','e' ]\n",
    "mylist.pop(1)\n",
    "mylist.remove('a')\n",
    "for a in mylist:\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b0f1f9ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e\n",
      "d\n",
      "c\n",
      "b\n",
      "a\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "mylist = [1,2,3,4,5,'a','b','c','d','e' ]\n",
    "mylist.reverse()\n",
    "for a in mylist:\n",
    "    print(a)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8f1066",
   "metadata": {},
   "source": [
    "### Problem 3 \n",
    "Write a code to capitalize the first letter of every word in a sentence. Python string has a method of doing this, but you are to do this yourself (this website will be useful: https://docs.python.org/3/library/stdtypes.html). (By 49:00 in the video, you should be able to do this part.)\n",
    "\n",
    "(Hint: The split, join, and capitalize functions will be helpful here. You may also want to think about using a for loop.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "003c0ee7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Write A Code To Capitalize The First Letter Of Every Word In A Sentence\n"
     ]
    }
   ],
   "source": [
    "mystring = \"Write a code to capitalize the first letter of every word in a sentence\"\n",
    "words = mystring.split()\n",
    "capitalwords = []\n",
    "mystring = \"\"\n",
    "for a in words:\n",
    "    capitalwords.append(a.capitalize())\n",
    "mystring = \" \".join(capitalwords)\n",
    "print(mystring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "b750e3de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Write A Code To Capitalize The First Letter Of Every Word In A Sentence\n"
     ]
    }
   ],
   "source": [
    "# Use the title method. You are supposed to produce the same result.\n",
    "print(mystring.title())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ada10bc0",
   "metadata": {},
   "source": [
    "### Problem 4\n",
    "Modify the Bank_Account class in \"ME4111-Lecture2-basics.ipynb\" to add a transfer method.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "9e779578",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your new class should look like this\n",
    "\n",
    "class Bank_Account():\n",
    "    bank_name = 'Bank of America'   # attributes\n",
    "    \n",
    "    def __init__(self,name,balance=0):\n",
    "        self.name = name             # attributes\n",
    "        self.balance = balance      # attributes\n",
    "        \n",
    "    def deposit(self,amount):      # method \n",
    "        self.balance += amount\n",
    "    \n",
    "    def withdraw(self,amount):\n",
    "        if amount < self.balance:\n",
    "            self.balance -= amount\n",
    "        else:\n",
    "            print(\"Withdsaw failed\")\n",
    "\n",
    "    def check_balance(self):\n",
    "        print(\"The current balance is ${}\".format(self.balance))\n",
    "    \n",
    "    def transfer(self,another_account,amount):\n",
    "        # your code goes here\n",
    "        self.balance -= amount\n",
    "        another_account.balance += amount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "a89f98b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before\n",
      "2000\n",
      "1000\n",
      "\n",
      "\n",
      "after\n",
      "1500\n",
      "1500\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test your code using examples like this:\n",
    "\n",
    "David = Bank_Account(\"David\", 2000)   # create an account\n",
    "Chris = Bank_Account(\"Chris\", 1000)   # create another account\n",
    "print(\"before\")\n",
    "print(David.balance)\n",
    "print(Chris.balance)\n",
    "print(\"\\n\")\n",
    "\n",
    "# David transfers 500 to Chris.\n",
    "David.transfer(Chris, 500)\n",
    "\n",
    "# Check your code to make sure it works\n",
    "print(\"after\")\n",
    "print(David.balance)\n",
    "print(Chris.balance)\n",
    "print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4de4fa2e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
