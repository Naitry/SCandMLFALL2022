{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d8bf0f5",
   "metadata": {},
   "source": [
    "# ME:4111 Scientific Computing and Machine Learning \n",
    "# Lecture 4: Bisection and False Position\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabfe2a6",
   "metadata": {},
   "source": [
    "## False Position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "156a9c67",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "#import matplotlib.pyplot as plt # either one is OK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8dcce3df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the function\n",
    "def fcs(x):\n",
    "    return x*x*x-x-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a3375450",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is at least one solution between 1.3 and 1.4\n",
      " iteration   xl       f(xl)    xr        f(xr)       xu      f(xu)       xrold      err  \n",
      " ------------------------------------------------------------------------------\n",
      "    1    1.30000    -0.10300   1.32304   -0.00713   1.40000    0.34400   1.30000   1.00000    (initial)\n",
      "         1.32304    -0.00713             -0.00713   1.40000    0.34400   1.32304   1.00000    (updated)\n",
      "    2    1.32304    -0.00713   1.32461   -0.00048   1.40000    0.34400   1.32304   0.06354    (initial)\n",
      "         1.32461    -0.00048             -0.00048   1.40000    0.34400   1.32461   0.06354    (updated)\n",
      "    3    1.32461    -0.00048   1.32471   -0.00003   1.40000    0.34400   1.32461   0.00423    (initial)\n",
      "         1.32471    -0.00003             -0.00003   1.40000    0.34400   1.32471   0.00423    (updated)\n",
      "    4    1.32471    -0.00003   1.32472   -0.00000   1.40000    0.34400   1.32471   0.00028    (initial)\n",
      " ------------------------------------------------------------------------------\n",
      "The solution is 1.3247 at iteration 4.\n"
     ]
    }
   ],
   "source": [
    "# initialization\n",
    "a=1.3\n",
    "b=1.4\n",
    "epstol = 0.001\n",
    "Nmax = 100\n",
    "xl = a\n",
    "xu = b\n",
    "xrold = a\n",
    "\n",
    "# make sure there is at least one solution between a and b\n",
    "if(fcs(a)*fcs(b)<0):\n",
    "    print('There is at least one solution between {} and {}'.format(a,b))\n",
    "else:\n",
    "    print('Solutions are not guaranteed!')\n",
    "\n",
    "# iterations in bisection\n",
    "i=0\n",
    "\n",
    "print(\" iteration   xl       f(xl)    xr        f(xr)       xu      f(xu)       xrold      err  \")\n",
    "print(\" ------------------------------------------------------------------------------\")\n",
    "\n",
    "while (i<Nmax):\n",
    "    i+=1\n",
    "    xr = xu-fcs(xu)*(xu-xl)/(fcs(xu)-fcs(xl))   # this only difference between bisection and false position!\n",
    "    relError = np.abs((xr-xrold)/(xr-a))\n",
    "    \n",
    "    print(f\"{i:5d}    {xl:1.5f}    {fcs(xl):1.5f}   {xr:1.5f}   {fcs(xr):1.5f}   {xu:1.5f}    {fcs(xu):1.5f}   {xrold:1.5f}   {relError:1.5f}    (initial)\")\n",
    "    \n",
    "    if relError < epstol:\n",
    "        strOutput='The solution is {:.4f}'.format(xr)\n",
    "        break;\n",
    "    if fcs(xl)*fcs(xr)<0:\n",
    "        xu = xr\n",
    "    else:\n",
    "        xl = xr\n",
    "    xrold=xr\n",
    "    \n",
    "\n",
    "    print(f\"         {xl:1.5f}    {fcs(xl):1.5f}             {fcs(xr):1.5f}   {xu:1.5f}    {fcs(xu):1.5f}   {xrold:1.5f}   {relError:1.5f}    (updated)\")\n",
    "print(\" ------------------------------------------------------------------------------\")\n",
    "\n",
    "print(strOutput, 'at iteration {}.'.format(i))\n",
    "     "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
