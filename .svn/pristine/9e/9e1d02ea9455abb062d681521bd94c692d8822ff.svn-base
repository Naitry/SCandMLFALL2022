{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4b138eb6",
   "metadata": {},
   "source": [
    "# ME:4111 Scientific Computing and Machine Learning\n",
    "# Lecture 3: Roots Problems"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfe979ea",
   "metadata": {},
   "source": [
    "## Incremental Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2747678d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "#import matplotlib.pyplot as plt # either one is OK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90552224",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is at least one solution between 3.0 and 6.0\n",
      "Solutions are in the following intervals: [(3.6, 4.2), (4.2, 4.8), (5.4, 6.0)]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# define the function and other parameters\n",
    "\n",
    "def fcs(x):\n",
    "    return np.sin(10*x)+np.cos(3*x)\n",
    "\n",
    "a=3.0\n",
    "b=6.0\n",
    "N=5\n",
    "dx=(b-a)/N\n",
    "\n",
    "# make sure there is at least one solution between a and b\n",
    "if(fcs(a)*fcs(b)<0):\n",
    "    print('There is at least one solution between {} and {}'.format(a,b))\n",
    "else:\n",
    "    print('Solutions are not guaranteed!')\n",
    "\n",
    "# divide the solution domain into intervals\n",
    "x=np.arange(a,b,dx) # np.arange doesn't include b    \n",
    "\n",
    "# Search\n",
    "SolInterval = []\n",
    "for xi in x:\n",
    "    if(fcs(xi)*fcs(xi+dx)<0):\n",
    "        SolInterval.append((xi, xi+dx))\n",
    "\n",
    "# Solution\n",
    "print('Solutions are in the following intervals:', SolInterval)       \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4f94e63",
   "metadata": {},
   "source": [
    "### plot the function and intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "354418b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def fcs(x):\n",
    "    return np.sin(10*x)+np.cos(3*x)\n",
    "\n",
    "x = np.arange(3.0, 6.01, 0.01)\n",
    "# red dashes and green dashes\n",
    "plt.plot(x, fcs(x))\n",
    "plt.plot(x,0*x,'r')\n",
    "\n",
    "a=3.0\n",
    "b=6.0\n",
    "N=5\n",
    "dx=(b-a)/N\n",
    "y = np.arange(-2.0, 2.0, 0.1)\n",
    "for xi in np.arange(a, b+0.1, dx):\n",
    "    plt.plot(xi*y/y, y, 'g--')\n",
    "plt.xlabel('x', size=20)\n",
    "plt.ylabel('f(x)', size=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cd1a0df",
   "metadata": {},
   "source": [
    "## Write a function to do bracketing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8aa443d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import arange as arange\n",
    "\n",
    "\n",
    "def bracketing(fun,xl,xu,n):\n",
    "    dx = (xu-xl)/n\n",
    "    x = arange(xl,xu*1.01,dx)\n",
    "    SolInterval = []\n",
    "    for xi in x:\n",
    "        if fun(xi)*fun(xi+dx) <= 0:\n",
    "            print(\" There is at least one solution in [{:.5f},{:.5f}]\".format(xi,xi+dx))\n",
    "            SolInterval.append((xi,xi+dx))\n",
    "    return SolInterval "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "23b8015c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " There is at least one solution in [3.00000,3.30000]\n",
      " There is at least one solution in [3.30000,3.60000]\n",
      " There is at least one solution in [3.60000,3.90000]\n",
      " There is at least one solution in [4.50000,4.80000]\n",
      " There is at least one solution in [5.40000,5.70000]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def fcs(x):\n",
    "    return np.sin(10*x)+np.cos(3*x)\n",
    "\n",
    "a=3.0\n",
    "b=6.0\n",
    "N=10\n",
    "\n",
    "solution = bracketing(fcs,a,b,N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f2e4486",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
