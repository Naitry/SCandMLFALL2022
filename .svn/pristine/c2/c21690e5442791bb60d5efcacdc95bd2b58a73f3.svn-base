{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b5434a9f",
   "metadata": {},
   "source": [
    "# ME:4111 Scientific Computing and Machine Learning \n",
    "# Lecture 4: Bisection and False Position"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b7672f0",
   "metadata": {},
   "source": [
    "## Both approaches implemented in the same function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "31ebc89b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# define the function\n",
    "def fcs(x):\n",
    "    return x*x*x-x-1\n",
    "\n",
    "# initialization\n",
    "a=1.3\n",
    "b=1.4\n",
    "epstol = 0.01\n",
    "Nmax = 100\n",
    "xl = a\n",
    "xu = b\n",
    "xrold = a\n",
    "\n",
    "def find_root(fun,xl,xu,method,info=False):\n",
    "    epstol = 0.001\n",
    "    Nmax = 100\n",
    "    xrold = xl\n",
    "    intvl = xu-xl\n",
    "    i=0\n",
    "    while (i<Nmax):\n",
    "        i += 1\n",
    "        if method=='bisection':\n",
    "            xr =(xl+xu)/2\n",
    "        elif method=='falsepos':\n",
    "            xr = xu-fun(xu)*(xu-xl)/(fun(xu)-fun(xl))   # this only difference!\n",
    "        relError = np.abs((xr-xrold)/intvl)\n",
    "        if relError < epstol:\n",
    "            if info:\n",
    "                print(f'Solution converged at iteration {i}')\n",
    "            return xr\n",
    "            break;\n",
    "        if fun(xl)*fun(xr)<0:\n",
    "            xu = xr\n",
    "        else:\n",
    "            xl = xr\n",
    "        xrold=xr\n",
    "        \n",
    "    print(\"Not convergence at {} iterations \".format(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "694a4a4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solution converged at iteration 4\n"
     ]
    }
   ],
   "source": [
    "root = find_root(fcs,a,b,'falsepos',True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2783485",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.3247174591786441"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "81093646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#using the code from above for another example\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "x = np.arange(-1,1,0.1)\n",
    "plt.plot(x, np.sin(x), 'b', x, 0/x, 'g')\n",
    "plt.xlabel('x', size=20)\n",
    "plt.ylabel('sin(x)', size=20)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2c4c0d3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "find_root(np.sin, -1, 1, 'falsepos')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
